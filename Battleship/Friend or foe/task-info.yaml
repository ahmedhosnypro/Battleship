type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    import java.io.FileNotFoundException;
    import static battleship.Game.startGame;
    import static battleship.ShipPosition.takePosition;

    public class Main {

        public static void main(String[] args) throws FileNotFoundException {
            GameField gameField = new GameField();
            takePosition(gameField);
            gameField.printField();
            startGame(gameField);
        }
    }
  learner_created: false
- name: src/battleship/field.txt
  visible: true
  text: |-
    . 1 2 3 4 5 6 7 8 9 10
    A O ~ ~ ~ ~ ~ ~ ~ ~ ~
    B O ~ ~ ~ ~ ~ ~ ~ O ~
    C O ~ ~ ~ ~ ~ ~ ~ O ~
    D O ~ ~ ~ ~ ~ ~ ~ O ~
    E ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
    F ~ ~ O O O O O ~ ~ ~
    G ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
    H ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
    I ~ O ~ ~ ~ ~ ~ ~ ~ ~
    J ~ O ~ ~ ~ ~ ~ O O O
  learner_created: false
- name: src/battleship/GameField.java
  visible: true
  text: |
    package battleship;

    import java.io.BufferedReader;
    import java.io.FileNotFoundException;
    import java.io.FileReader;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import java.util.Scanner;


    public class GameField {
        private String[][] gameField = new String[11][11];
        private String[][] hiddenField = new String[11][11];
        private String[][] visualField = new String[11][11];
        private int[][] AircraftCarrier;
        private int[][] Battleship;
        private int[][] Submarine;
        private int[][] Cruiser;
        private int[][] Destroyer;

        {
            for (int i = 0; i < gameField.length; i++) {
                for (int j = 0; j < gameField.length; j++) {
                    if (i == 0 && j == 0) {
                        gameField[0][0] = " ";
                    } else if (i == 0) {
                        gameField[0][j] = String.valueOf(j);
                    } else if (j == 0) {
                        gameField[i][0] = String.valueOf((char) (i + 64));
                    } else {
                        gameField[i][j] = "~";
                    }
                }
            }

            for (int i = 0; i < hiddenField.length; i++) {
                for (int j = 0; j < hiddenField.length; j++) {
                    if (i == 0 && j == 0) {
                        hiddenField[0][0] = " ";
                    } else if (i == 0) {
                        hiddenField[0][j] = String.valueOf(j);
                    } else if (j == 0) {
                        hiddenField[i][0] = String.valueOf((char) (i + 64));
                    } else {
                        hiddenField[i][j] = "~";
                    }
                }
            }

            for (int i = 0; i < visualField.length; i++) {
                for (int j = 0; j < visualField.length; j++) {
                    if (i == 0 && j == 0) {
                        visualField[0][0] = " ";
                    } else if (i == 0) {
                        visualField[0][j] = String.valueOf(j);
                    } else if (j == 0) {
                        visualField[i][0] = String.valueOf((char) (i + 64));
                    } else {
                        visualField[i][j] = "~";
                    }
                }
            }
        }

        GameField() {
        }

        public void setGameField(String[][] gameField) {
            this.gameField = gameField;
        }
        public void setGameField() throws FileNotFoundException {
            String[][] field = new String[11][11];
            Scanner sc = new Scanner(new BufferedReader(new FileReader("Battleship/task/src/battleship/field.txt")));
            while(sc.hasNextLine()) {
                for (String[] strings : field) {
                    String[] line = sc.nextLine().split(" ");
                    System.arraycopy(line, 0, strings, 0, line.length);
                }
            }
            this.gameField = field;
        }
        public String[][] getGameField() {
            return gameField;
        }

        public void setHiddenField(String[][] hiddenField) {
            this.hiddenField = hiddenField;
        }
        public String[][] getHiddenField() {
            return hiddenField;
        }

        public String[][] getVisualField() {
            return visualField;
        }

        public void setVisualField(String[][] visualField) {
            this.visualField = visualField;
        }

        public int[][] getAircraftCarrier() {
            return AircraftCarrier;
        }
        public void setAircraftCarrier(int[][] aircraftCarrier) {
            AircraftCarrier = aircraftCarrier;
        }

        public int[][] getBattleship() {
            return Battleship;
        }
        public void setBattleship(int[][] battleship) {
            Battleship = battleship;
        }

        public int[][] getCruiser() {
            return Cruiser;
        }
        public void setCruiser(int[][] cruiser) {
            Cruiser = cruiser;
        }

        public int[][] getDestroyer() {
            return Destroyer;
        }
        public void setDestroyer(int[][] destroyer) {
            Destroyer = destroyer;
        }

        public int[][] getSubmarine() {
            return Submarine;
        }
        public void setSubmarine(int[][] submarine) {
            Submarine = submarine;
        }

        void printField() {
            for (String[] strings : gameField) {
                for (int j = 0; j < strings.length; j++) {
                    if (j == gameField.length) {
                        System.out.print(strings[j]);
                    } else {
                        System.out.print(strings[j] + " ");
                    }
                }
                System.out.println();
            }
        }
        void printHiddenField(){
            for (String[] strings : hiddenField) {
                for (int j = 0; j < strings.length; j++) {
                    if (j == hiddenField.length) {
                        System.out.print(strings[j]);
                    } else {
                        System.out.print(strings[j] + " ");
                    }
                }
                System.out.println();
            }
        }
        void printVisualField(){
            for (String[] strings : visualField) {
                for (int j = 0; j < strings.length; j++) {
                    if (j == visualField.length) {
                        System.out.print(strings[j]);
                    } else {
                        System.out.print(strings[j] + " ");
                    }
                }
                System.out.println();
            }
        }

        boolean checkShip(){

            return false;
        }

    }
  learner_created: false
- name: src/battleship/ShipPosition.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class ShipPosition {
        static private final Scanner scanner;

        static  {
            scanner = new Scanner(System.in);
        }

        static void takePosition(GameField field){
            field.printField();
            System.out.println();

            System.out.println("Enter the coordinates of the Aircraft Carrier (5 cells):");
            System.out.println();
            while (positioning("Aircraft Carrier", 5, field));
            field.printField();
            System.out.println();

            System.out.println("Enter the coordinates of the Battleship (4 cells):");
            System.out.println();
            while (positioning("Battleship" , 4, field));
            field.printField();
            System.out.println();

            System.out.println("Enter the coordinates of the Submarine (3 cells):");
            System.out.println();
            while (positioning("Submarine", 3, field));
            field.printField();
            System.out.println();

            System.out.println("Enter the coordinates of the Cruiser (3 cells):");
            System.out.println();
            while (positioning("Cruiser", 3, field));
            field.printField();
            System.out.println();

            System.out.println("Enter the coordinates of the Destroyer (2 cells):");
            System.out.println();
            while (positioning("Destroyer", 2, field));
            field.printField();
            System.out.println();
        }

        static private boolean positioning(String ship, int cells, GameField field) {
            boolean isNotFinished = false;
            String[] input = scanner.nextLine().trim().split(" ");
            System.out.println();
            if (checkInput(input).equals("valid")) {
                if (checkLocation(input)) {
                    if (checkLength(input, cells).equals("valid")) {
                        if (checkNearbyLocations(input, field)){
                            placeShip(input, field, cells, ship);
                        }
                        else {
                            System.out.println("Error! You placed it too close to another one. Try again:");
                            System.out.println();
                            isNotFinished = true;
                        }
                    } else {
                        System.out.println("Error! Wrong length of the " + ship + "! Try again:");
                        System.out.println();
                        isNotFinished = true;
                    }
                } else {
                    System.out.println("Error! Wrong ship location! Try again:");
                    System.out.println();
                    isNotFinished = true;
                }
            } else {
                System.out.println("invalid input");
                System.out.println();
                isNotFinished = true;
            }

            return isNotFinished;
        }

        static private String checkInput(String[] input) {
            String check = "";
            if (input.length != 2) {
                //check = "oneArgument";
                check = "you must enter two coordinates";
            } else {
                input[0] = input[0].replaceAll("10", ":");
                input[1] = input[1].replaceAll("10", ":");
                for (int i = 0; i < input.length; i++) {
                    if (input[i].length() != 2) {
                        //check = "oneArgument " + (i + 1);
                        check = "wrong coordinate " + (i + 1);
                        break;
                    } else {
                        if (!(input[i].charAt(0) >= 65 && input[i].charAt(0) <= 74)) {
                            check = input[i].charAt(0) + " first option  on coordinate " + (i + 1) + " is out of rang";
                            break;
                        }
                        if (!(input[i].charAt(1) >= 48 && input[i].charAt(1) <= 58)) {
                            check = input[i].charAt(1) + " second option  on coordinate " + (i + 1) + " must be a number";
                            break;
                        } else {
                            check = "valid";
                        }
                    }
                }
            }
            return check;
        }

        static private boolean checkLocation(String[] input) {
            //Coordinate
            String fstCrd = input[0];
            String sndCrd = input[1];
            return fstCrd.charAt(0) == sndCrd.charAt(0) || fstCrd.charAt(1) == sndCrd.charAt(1);
        }

        static private String checkLength(String[] input, int cells) {
            String check = "valid";
            String fstCrd = input[0];
            String sndCrd = input[1];

            if (fstCrd.charAt(0) == sndCrd.charAt(0)) {
                char ch1 = fstCrd.charAt(1);
                char ch2 = sndCrd.charAt(1);
                if (Math.abs(ch1 - ch2) + 1 != cells) {
                    check = "wrong";
                }
            } else {
                if (Math.abs(fstCrd.charAt(0) - sndCrd.charAt(0)) + 1 != cells) {
                    check = "wrong";
                }
            }

            return check;
        }

        static private boolean checkNearbyLocations(String[] input, GameField field) {
            boolean check = true;

            int fstCrdRow = (input[0].charAt(0) - 64);
            int fstCrdClm = (input[0].charAt(1) - 48);
            int sndCrdRow = (input[1].charAt(0) - 64);
            int sndCrdClm = (input[1].charAt(1) - 48);

            int fstClm = 0;
            int lstClm = 0;
            int fstRow = 0;
            int lstRow = 0;
            if (fstCrdRow == sndCrdRow) {
                fstClm = Math.min(fstCrdClm, sndCrdClm);
                lstClm = Math.max(fstCrdClm, sndCrdClm);
                if (fstCrdRow == 1){
                    fstRow = fstCrdRow;
                    lstRow = fstCrdRow + 1;
                }
                else if (fstCrdRow == 10){
                    fstRow = fstCrdRow - 1;
                    lstRow = fstCrdRow;
                }
                else {
                    fstRow = fstCrdRow - 1;
                    lstRow = lstRow + 1;
                }
                if (fstClm == 1){
                    lstClm = lstClm + 1;
                }
                else if (lstClm == 10){
                    fstClm = fstClm - 1;
                }
                else {
                    fstClm = fstClm - 1;
                    lstClm = lstClm + 1;
                }
            }
            else if (fstCrdClm == sndCrdClm) {
                fstRow = Math.min(fstCrdRow, sndCrdRow);
                lstRow = Math.max(fstCrdRow, sndCrdRow);

                if (fstCrdClm == 1){
                    fstClm = fstCrdClm;
                    lstClm = fstCrdClm + 1;
                }
                else if (fstCrdClm == 10){
                    fstClm = fstCrdClm - 1;
                    lstClm = fstCrdClm;
                }
                else {
                    fstClm = fstCrdClm - 1;
                    lstClm = fstCrdClm + 1;
                }
                if (fstRow == 1){
                    lstRow = lstRow + 1;
                }
                else if (lstRow == 10){
                    fstRow = fstRow - 1;
                }
                else {
                    fstRow = fstRow - 1;
                    lstRow = lstRow + 1;
                }
            }
            for (int i = fstRow; i <= lstRow; i++){
                for (int j = fstClm; j <= lstClm; j++){
                    if (!field.getGameField()[i][j].equals("~")) {
                        check = false;
                        break;
                    }
                }
            }
            return check;
        }

        static private void placeShip(String[] input, GameField field, int cells, String ship){
            int fstCrdRow = (input[0].charAt(0) - 64);
            int fstCrdClm = (input[0].charAt(1) - 48);
            int sndCrdRow = (input[1].charAt(0) - 64);
            int sndCrdClm = (input[1].charAt(1) - 48);

            int fstClm = Math.min(fstCrdClm, sndCrdClm);
            int lstClm = Math.max(fstCrdClm, sndCrdClm);
            int fstRow = Math.min(fstCrdRow, sndCrdRow);
            int lstRow = Math.max(fstCrdRow, sndCrdRow);

            setShip(input, ship, field);

            for (int i = fstRow; i <= lstRow; i++){
                for (int j = fstClm; j <= lstClm; j++){
                    field.getGameField()[i][j] = "O";
                    switch (ship){
                        case "Aircraft Carrier":
                            field.getVisualField()[i][j] = "A";
                            break;
                        case "Battleship":
                            field.getVisualField()[i][j] = "B";
                            break;
                        case "Submarine":
                            field.getVisualField()[i][j] = "S";
                            break;
                        case "Cruiser":
                            field.getVisualField()[i][j] = "C";
                            break;
                        case "Destroyer":
                            field.getVisualField()[i][j] = "D";
                            break;
                        default:
                            break;
                    }

                }
            }
        }
        static private void setShip(String[] input, String ship, GameField field){
            int fstCrdRow = (input[0].charAt(0) - 64);
            int fstCrdClm = (input[0].charAt(1) - 48);
            int sndCrdRow = (input[1].charAt(0) - 64);
            int sndCrdClm = (input[1].charAt(1) - 48);

            int fstClm = Math.min(fstCrdClm, sndCrdClm);
            int lstClm = Math.max(fstCrdClm, sndCrdClm);
            int fstRow = Math.min(fstCrdRow, sndCrdRow);
            int lstRow = Math.max(fstCrdRow, sndCrdRow);

            int[][] shipCoordinates = (new int[][]{{fstRow, fstClm},{lstRow, lstClm}});
            switch (ship){
                case "Aircraft Carrier":
                    field.setAircraftCarrier(shipCoordinates);
                    break;
                case "Battleship":
                    field.setBattleship(shipCoordinates);
                    break;
                case "Submarine":
                    field.setSubmarine(shipCoordinates);
                    break;
                case "Cruiser":
                    field.setCruiser(shipCoordinates);
                    break;
                case "Destroyer":
                    field.setDestroyer(shipCoordinates);
                    break;
                default:
                    break;
            }
        }
    }
  learner_created: false
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Game {
        static private final Scanner scanner;

        static  {
            scanner = new Scanner(System.in);
        }

        static void startGame(GameField field){
            System.out.println();
            System.out.println("The game starts!");
            System.out.println();
            field.printHiddenField();
            System.out.println();
            System.out.println("Take a shot!");
            System.out.println();
            while (shot(field));
        }

        static private String checkInput(String input) {
            String check = "";
            input = input.replaceAll("10", ":");
            if (input.length() != 2) {
                check = "wrong coordinate";
                return check;
            } else {
                if (!(input.charAt(0) >= 65 && input.charAt(0) <= 74)) {
                    check = input.charAt(0) + " first option on the coordinate must be [A - J]";
                    return check;
                }
                else if (!(input.charAt(1) >= 48 && input.charAt(1) <= 58)) {
                    check = input.charAt(1) + " second option on the coordinate must be a number";
                    return check;
                } else {
                    check = "valid";
                    return check;
                }
            }
        }

        static boolean shot(GameField field){
            boolean isContinue = true;
            String input = scanner.nextLine().trim();
            input = input.replaceAll("10", ":");
            System.out.println();
            if (!checkInput(input).equals("valid")) {
                System.out.println("Error! You entered the wrong coordinates! Try again:");
            }
            else {
                int row = (input.charAt(0) - 64);
                int clm = (input.charAt(1) - 48);

                switch (field.getGameField()[row][clm]) {
                    case "O":
                    case "X":
                        field.getGameField()[row][clm] = "X";
                        field.getHiddenField()[row][clm] = "X";
    //                    field.getVisualField()[row][clm] = "X";
                        field.printHiddenField();
                        System.out.println();
                        if (isAllSank(field)) {
                            System.out.println("You sank the last ship. You won. Congratulations!");
                            isContinue = false;
                        } else if (isSank(field, row, clm)) {
                            System.out.println("You sank a ship! Specify a new target:");
                        } else {
                            System.out.println("You hit a ship! Try again:");
                        }
                        break;
                    case "~":
                        field.getGameField()[row][clm] = "M";
                        field.getHiddenField()[row][clm] = "M";
    //                    field.getVisualField()[row][clm] = "M";
                        field.printHiddenField();
                        System.out.println();
                        System.out.println("You missed. Try again:");
                        break;
    //                case "X":
    //                    System.out.println("already shot");
    //                    break;
                    default:
                        break;
                }
            }

            System.out.println();
            return isContinue;
        }

        private static boolean isSank(GameField field, int row, int clm){
            int[][] cords = new int[2][2];
            switch (field.getVisualField()[row][clm]){
                case "A":
                    cords = field.getAircraftCarrier();
                    break;
                case "B":
                    cords = field.getBattleship();
                    break;
                case "s":
                    cords = field.getSubmarine();
                    break;
                case "C":
                    cords = field.getCruiser();
                    break;
                case "D":
                    cords = field.getDestroyer();
                    break;
                default:
                    break;
            }
            boolean isSank = true;
            for (int i = cords[0][0]; i <= cords[1][0]; i++){
                for (int j = cords[0][1]; j <= cords[1][1]; j++){
                    if (!field.getGameField()[i][j].equals("X")){
                        isSank = false;
                        break;
                    }
                }
            }

            return isSank;
        }
        private static boolean isAllSank(GameField field){
            return isAircraftCarrierSank(field) && isBattleshipSank(field) && isSubmarineSank(field) && isCruiserSank(field)
                    && isDestroyerSank(field);
        }
        private static boolean isAircraftCarrierSank(GameField field){
            boolean isSank = true;
            int[][] cords = field.getAircraftCarrier();

            for (int i = cords[0][0]; i <= cords[1][0]; i++){
                for (int j = cords[0][1]; j <= cords[1][1]; j++){
                    if (!field.getGameField()[i][j].equals("X")){
                        isSank = false;
                        break;
                    }
                }
            }

            return isSank;

        }
        private static boolean isBattleshipSank(GameField field){
            boolean isSank = true;
            int[][] cords = field.getBattleship();

            for (int i = cords[0][0]; i <= cords[1][0]; i++){
                for (int j = cords[0][1]; j <= cords[1][1]; j++){
                    if (!field.getGameField()[i][j].equals("X")){
                        isSank = false;
                        break;
                    }
                }
            }

            return isSank;

        }
        private static boolean isSubmarineSank(GameField field){
            boolean isSank = true;
            int[][] cords = field.getSubmarine();

            for (int i = cords[0][0]; i <= cords[1][0]; i++){
                for (int j = cords[0][1]; j <= cords[1][1]; j++){
                    if (!field.getGameField()[i][j].equals("X")){
                        isSank = false;
                        break;
                    }
                }
            }

            return isSank;

        }
        private static boolean isCruiserSank(GameField field){
            boolean isSank = true;
            int[][] cords = field.getCruiser();

            for (int i = cords[0][0]; i <= cords[1][0]; i++){
                for (int j = cords[0][1]; j <= cords[1][1]; j++){
                    if (!field.getGameField()[i][j].equals("X")){
                        isSank = false;
                        break;
                    }
                }
            }

            return isSank;

        }
        private static boolean isDestroyerSank(GameField field){
            boolean isSank = true;
            int[][] cords = field.getDestroyer();

            for (int i = cords[0][0]; i <= cords[1][0]; i++){
                for (int j = cords[0][1]; j <= cords[1][1]; j++){
                    if (!field.getGameField()[i][j].equals("X")){
                        isSank = false;
                        break;
                    }
                }
            }

            return isSank;

        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Unchecked
record: 5
